{"version":3,"sources":["CartSummary.js","Navi.js","CategoryList.js","ProductList.js","App.js","serviceWorker.js","index.js"],"names":["CartSummary","UncontrolledDropdown","nav","inNavbar","DropdownToggle","caret","this","props","cart","length","DropdownMenu","right","map","cartItem","DropdownItem","key","product","id","productName","divider","Component","Navi","toggle","bind","state","isOpen","setState","Navbar","color","light","expand","NavbarBrand","href","NavbarToggler","onClick","Collapse","navbar","Nav","className","NavItem","NavLink","React","CategoryList","categories","getCategories","fetch","then","resp","json","resp2","info","title","ListGroup","category","ListGroupItem","changeCategory","categoryId","active","categoryName","currentCategory","ProductList","Table","products","scope","quantityPerUnit","unitPrice","unitsInStock","Button","addToCart","App","getProducts","url","newCart","push","quantity","Container","Row","Col","xs","baskaBirSey","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.31e247c5.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nimport {\n  UncontrolledDropdown,\n  DropdownToggle,\n  DropdownMenu,\n  DropdownItem,\n} from \"reactstrap\";\n\nexport default class CartSummary extends Component {\n  render() {\n    return (\n      <div>\n        <UncontrolledDropdown nav inNavbar>\n          <DropdownToggle nav caret>\n            Options-{this.props.cart.length}\n          </DropdownToggle>\n          <DropdownMenu right>\n            {this.props.cart.map((cartItem) => (\n              <DropdownItem key={cartItem.product.id}>\n                {cartItem.product.productName}\n              </DropdownItem>\n            ))}\n\n            <DropdownItem divider />\n            <DropdownItem>Reset</DropdownItem>\n          </DropdownMenu>\n        </UncontrolledDropdown>\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport {\n  Collapse,\n  Navbar,\n  NavbarToggler,\n  NavbarBrand,\n  Nav,\n  NavItem,\n  NavLink,\n} from \"reactstrap\";\nimport CartSummary from \"./CartSummary\";\n\nexport default class Navi extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.toggle = this.toggle.bind(this);\n    this.state = {\n      isOpen: false,\n    };\n  }\n  toggle() {\n    this.setState({\n      isOpen: !this.state.isOpen,\n    });\n  }\n  render() {\n    return (\n      <div>\n        <Navbar color=\"light\" light expand=\"md\">\n          <NavbarBrand href=\"/\">Northwint </NavbarBrand>\n          <NavbarToggler onClick={this.toggle} />\n          <Collapse isOpen={this.state.isOpen} navbar>\n            <Nav className=\"ml-auto\" navbar>\n              <NavItem>\n                <NavLink href=\"/components/\">Components</NavLink>\n              </NavItem>\n              <NavItem>\n                <NavLink href=\"https://github.com/reactstrap/reactstrap\">\n                  GitHub\n                </NavLink>\n              </NavItem>\n             <CartSummary cart = {this.props.cart}/>\n            </Nav>\n          </Collapse>\n        </Navbar>\n      </div>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport { ListGroup, ListGroupItem } from \"reactstrap\";\nexport default class CategoryList extends Component {\n  state = {\n    categories: [],\n  };\n\n  componentDidMount() {\n    this.getCategories();\n  }\n\n  getCategories = () => {\n    fetch(\"http://localhost:3000/categories\")\n      .then((resp) => resp.json())\n      .then((resp2) => this.setState({ categories: resp2 }));\n  };\n\n  render() {\n    return (\n      <div>\n        <h2>{this.props.info.title}</h2>\n\n        <ListGroup>\n          {this.state.categories.map((category) => (\n            <ListGroupItem\n              onClick={() => this.props.changeCategory(category)}\n              key={category.categoryId}\n              active={\n                category.categoryName === this.props.currentCategory\n                  ? true\n                  : false\n              }\n            >\n              {category.categoryName}\n            </ListGroupItem>\n          ))}\n        </ListGroup>\n        {/* <h4>{this.props.currentCategory}</h4> */}\n      </div>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport { Table, Button } from \"reactstrap\";\nexport default class ProductList extends Component {\n\n\n\n  render() {\n    return (\n      <div>\n        <h2>\n          {this.props.info.title}-{this.props.currentCategory}\n        </h2>\n        <Table>\n          <thead>\n            <tr>\n              <th>#</th>\n              <th>Product Name</th>\n              <th>Quantity Per Unit</th>\n              <th>Unit Price</th>\n              <th>Units In Stock</th>\n              <th></th>\n            \n            </tr>\n          </thead>\n          <tbody>\n            {this.props.products.map((product) => (\n              <tr key={product.id}>\n                <th scope=\"row\">{product.id}</th>\n                <td>{product.productName}</td>\n                <td>{product.quantityPerUnit}</td>\n                <td>{product.unitPrice}</td>\n                <td>{product.unitsInStock}</td>\n                <td><Button onClick={()=>this.props.addToCart(product)} color=\"info\">Add</Button>{' '}</td>\n              </tr>\n            ))}\n          </tbody>\n        </Table>\n      </div>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport Navi from \"./Navi\";\nimport CategoryList from \"./CategoryList\";\nimport ProductList from \"./ProductList\";\nimport { Container, Row, Col } from \"reactstrap\";\n\nexport default class App extends Component {\n  state = {\n    currentCategory: \"\",\n    products: [],\n    cart: [],\n  };\n\n  changeCategory = (category) => {\n    this.setState({ currentCategory: category.categoryName });\n    this.getProducts(category.id);\n  };\n\n  componentDidMount() {\n    this.getProducts();\n  }\n\n  getProducts = (categoryId) => {\n    let url = \"http://localhost:3000/products\";\n    if (categoryId) {\n      url += \"/?categoryId=\" + categoryId;\n    }\n    fetch(url)\n      .then((resp) => resp.json())\n      .then((resp2) => this.setState({ products: resp2 }));\n  };\n\n  addToCart = (product) => {\n    let newCart = this.state.cart;\n   // let addedItem = newCart.find((c) => c.product.id === product.id);\n  newCart.push({product:product, quantity:1});\n  this.setState({cart:newCart});\n  \n  };\n\n  render() {\n    let ProductInfo = { title: \"ProductList\", baskaBirSey: \"Baska Birsey\" };\n    let CategoryInfo = { title: \"CategoryList\" };\n    return (\n      <div>\n        <Container>\n        <Navi cart={this.state.cart}/>\n\n          <Row>\n            <Col xs=\"3\">\n              <CategoryList\n                currentCategory={this.state.currentCategory}\n                changeCategory={this.changeCategory}\n                info={CategoryInfo}\n              />\n            </Col>\n\n            <Col xs=\"9\">\n              <ProductList\n                addToCart = {this.addToCart}\n                products={this.state.products}\n                currentCategory={this.state.currentCategory}\n                info={ProductInfo}\n              />\n            </Col>\n          </Row>\n        </Container>\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}